        -:    0:Source:C:/Users/Usuario/8.6.5/mingw/include/c++/7.2.0/ext/new_allocator.h
        -:    0:Graph:C:\Users\Usuario\Desktop\por_favor_funciona\template-alumnos\cmake-build-debug\CMakeFiles\ajedrezLite.dir\ejercicios.gcno
        -:    0:Data:C:\Users\Usuario\Desktop\por_favor_funciona\template-alumnos\cmake-build-debug\CMakeFiles\ajedrezLite.dir\ejercicios.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2017 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/new_allocator.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _NEW_ALLOCATOR_H
        -:   30:#define _NEW_ALLOCATOR_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <new>
        -:   34:#include <bits/functexcept.h>
        -:   35:#include <bits/move.h>
        -:   36:#if __cplusplus >= 201103L
        -:   37:#include <type_traits>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  using std::size_t;
        -:   45:  using std::ptrdiff_t;
        -:   46:
        -:   47:  /**
        -:   48:   *  @brief  An allocator that uses global new, as per [20.4].
        -:   49:   *  @ingroup allocators
        -:   50:   *
        -:   51:   *  This is precisely the allocator defined in the C++ Standard.
        -:   52:   *    - all allocation calls operator new
        -:   53:   *    - all deallocation calls operator delete
        -:   54:   *
        -:   55:   *  @tparam  _Tp  Type of allocated object.
        -:   56:   */
        -:   57:  template<typename _Tp>
        -:   58:    class new_allocator
        -:   59:    {
        -:   60:    public:
        -:   61:      typedef size_t     size_type;
        -:   62:      typedef ptrdiff_t  difference_type;
        -:   63:      typedef _Tp*       pointer;
        -:   64:      typedef const _Tp* const_pointer;
        -:   65:      typedef _Tp&       reference;
        -:   66:      typedef const _Tp& const_reference;
        -:   67:      typedef _Tp        value_type;
        -:   68:
        -:   69:      template<typename _Tp1>
        -:   70:	struct rebind
        -:   71:	{ typedef new_allocator<_Tp1> other; };
        -:   72:
        -:   73:#if __cplusplus >= 201103L
        -:   74:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   75:      // 2103. propagate_on_container_move_assignment
        -:   76:      typedef std::true_type propagate_on_container_move_assignment;
        -:   77:#endif
        -:   78:
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIS2_IiiES3_ESaIS4_EEEC2Ev called 3 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIiiESaIS3_EEEC2Ev called 420 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEEC2Ev called 1575 returned 100% blocks executed 100%
     1998:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        3:   79-block  0
      420:   79-block  1
     1575:   79-block  2
        -:   80:
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIS2_IiiES3_ESaIS4_EEEC2ERKS7_ called 314 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt4pairIS1_IiiES2_EEC2ERKS4_ called 54 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEEC2ERKS3_ called 18550933 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIiiESaIS3_EEEC2ERKS6_ called 2301867 returned 100% blocks executed 100%
 20853168:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
      314:   81-block  0
       54:   81-block  1
 18550933:   81-block  2
  2301867:   81-block  3
        -:   82:
        -:   83:      template<typename _Tp1>
        -:   84:	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   85:
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIS2_IiiES3_ESaIS4_EEED2Ev called 317 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt4pairIS1_IiiES2_EED2Ev called 80 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEED2Ev called 18552508 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIiiESaIS3_EEED2Ev called 2302287 returned 100% blocks executed 100%
 20855192:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
      317:   86-block  0
       80:   86-block  1
 18552508:   86-block  2
  2302287:   86-block  3
        -:   87:
        -:   88:      pointer
        -:   89:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   90:      { return std::__addressof(__x); }
        -:   91:
        -:   92:      const_pointer
        -:   93:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   94:      { return std::__addressof(__x); }
        -:   95:
        -:   96:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:   97:      // about what the return value is when __n == 0.
        -:   98:      pointer
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIS2_IiiES3_ESaIS4_EEE8allocateEyPKv called 6 returned 100% blocks executed 83%
function _ZN9__gnu_cxx13new_allocatorISt4pairIS1_IiiES2_EE8allocateEyPKv called 102 returned 100% blocks executed 83%
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIiiESaIS3_EEE8allocateEyPKv called 1150410 returned 100% blocks executed 83%
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEE8allocateEyPKv called 9276252 returned 100% blocks executed 83%
 10426770:   99:      allocate(size_type __n, const void* = 0)
        6:   99-block  0
      102:   99-block  1
  1150410:   99-block  2
  9276252:   99-block  3
        -:  100:      {
 10426770:  101:	if (__n > this->max_size())
        6:  101-block  0
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
      102:  101-block  1
call    3 returned 102
branch  4 taken 0 (fallthrough)
branch  5 taken 102
  1150410:  101-block  2
call    6 returned 1150410
branch  7 taken 0 (fallthrough)
branch  8 taken 1150410
  9276252:  101-block  3
call    9 returned 9276252
branch 10 taken 0 (fallthrough)
branch 11 taken 9276252
    #####:  102:	  std::__throw_bad_alloc();
    $$$$$:  102-block  0
call    0 never executed
    $$$$$:  102-block  1
call    1 never executed
    $$$$$:  102-block  2
call    2 never executed
    $$$$$:  102-block  3
call    3 never executed
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
 10426770:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        6:  111-block  0
call    0 returned 6
      102:  111-block  1
call    1 returned 102
  1150410:  111-block  2
call    2 returned 1150410
  9276252:  111-block  3
call    3 returned 9276252
        -:  112:      }
        -:  113:
        -:  114:      // __p is not permitted to be a null pointer.
        -:  115:      void
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIS2_IiiES3_ESaIS4_EEE10deallocateEPS6_y called 6 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt4pairIS1_IiiES2_EE10deallocateEPS3_y called 102 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEE10deallocateEPS2_y called 9276252 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIiiESaIS3_EEE10deallocateEPS5_y called 1150410 returned 100% blocks executed 100%
 10426770:  116:      deallocate(pointer __p, size_type)
        6:  116-block  0
      102:  116-block  1
  9276252:  116-block  2
  1150410:  116-block  3
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
 10426770:  125:	::operator delete(__p);
        6:  125-block  0
call    0 returned 6
      102:  125-block  1
call    1 returned 102
  9276252:  125-block  2
call    2 returned 9276252
  1150410:  125-block  3
call    3 returned 1150410
 10426770:  126:      }
        -:  127:
        -:  128:      size_type
function _ZNK9__gnu_cxx13new_allocatorISt6vectorISt4pairIS2_IiiES3_ESaIS4_EEE8max_sizeEv called 12 returned 100% blocks executed 100%
function _ZNK9__gnu_cxx13new_allocatorISt4pairIS1_IiiES2_EE8max_sizeEv called 282 returned 100% blocks executed 100%
function _ZNK9__gnu_cxx13new_allocatorISt6vectorISt4pairIiiESaIS3_EEE8max_sizeEv called 1150426 returned 100% blocks executed 100%
function _ZNK9__gnu_cxx13new_allocatorISt4pairIiiEE8max_sizeEv called 9276296 returned 100% blocks executed 100%
 10427016:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
       12:  129-block  0
      282:  129-block  1
  1150426:  129-block  2
  9276296:  129-block  3
 10427016:  130:      { return size_t(-1) / sizeof(_Tp); }
       12:  130-block  0
      282:  130-block  1
  1150426:  130-block  2
  9276296:  130-block  3
        -:  131:
        -:  132:#if __cplusplus >= 201103L
        -:  133:      template<typename _Up, typename... _Args>
        -:  134:	void
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIS2_IiiES3_ESaIS4_EEE9constructIS6_JS6_EEEvPT_DpOT0_ called 3 returned 100% blocks executed 86%
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIiiESaIS3_EEE9constructIS5_JS5_EEEvPT_DpOT0_ called 16 returned 100% blocks executed 86%
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEE9constructIS2_JRKS2_EEEvPT_DpOT0_ called 43 returned 100% blocks executed 83%
       62:  135:	construct(_Up* __p, _Args&&... __args)
        3:  135-block  0
       16:  135-block  1
       43:  135-block  2
       62:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        3:  136-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3:  136-block  1
call    4 returned 3
    $$$$$:  136-block  2
       16:  136-block  3
call    5 returned 16
call    6 returned 16
branch  7 taken 16 (fallthrough)
branch  8 taken 0
       16:  136-block  4
call    9 returned 16
    $$$$$:  136-block  5
       43:  136-block  6
call   10 returned 43
call   11 returned 43
branch 12 taken 43 (fallthrough)
branch 13 taken 0
       43:  136-block  7
    $$$$$:  136-block  8
        -:  137:
        -:  138:      template<typename _Up>
        -:  139:	void
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIS2_IiiES3_ESaIS4_EEE7destroyIS6_EEvPT_ called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt4pairIiiESaIS3_EEE7destroyIS5_EEvPT_ called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEE7destroyIS2_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    $$$$$:  140-block  0
    $$$$$:  140-block  1
call    0 never executed
    $$$$$:  140-block  2
    $$$$$:  140-block  3
call    1 never executed
    $$$$$:  140-block  4
        -:  141:#else
        -:  142:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  143:      // 402. wrong new expression in [some_] allocator::construct
        -:  144:      void
        -:  145:      construct(pointer __p, const _Tp& __val)
        -:  146:      { ::new((void *)__p) _Tp(__val); }
        -:  147:
        -:  148:      void
        -:  149:      destroy(pointer __p) { __p->~_Tp(); }
        -:  150:#endif
        -:  151:    };
        -:  152:
        -:  153:  template<typename _Tp>
        -:  154:    inline bool
        -:  155:    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  156:    { return true; }
        -:  157:
        -:  158:  template<typename _Tp>
        -:  159:    inline bool
        -:  160:    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  161:    { return false; }
        -:  162:
        -:  163:_GLIBCXX_END_NAMESPACE_VERSION
        -:  164:} // namespace
        -:  165:
        -:  166:#endif
